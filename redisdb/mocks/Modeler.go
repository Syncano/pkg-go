// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Modeler is an autogenerated mock type for the Modeler type
type Modeler struct {
	mock.Mock
}

// Key provides a mock function with given fields: args
func (_m *Modeler) Key(args map[string]interface{}) string {
	ret := _m.Called(args)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ListArgs provides a mock function with given fields: args
func (_m *Modeler) ListArgs(args map[string]interface{}) string {
	ret := _m.Called(args)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ListMaxSize provides a mock function with given fields: args
func (_m *Modeler) ListMaxSize(args map[string]interface{}) int {
	ret := _m.Called(args)

	var r0 int
	if rf, ok := ret.Get(0).(func(map[string]interface{}) int); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TTL provides a mock function with given fields: args
func (_m *Modeler) TTL(args map[string]interface{}) time.Duration {
	ret := _m.Called(args)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(map[string]interface{}) time.Duration); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TrimmedTTL provides a mock function with given fields: args
func (_m *Modeler) TrimmedTTL(args map[string]interface{}) time.Duration {
	ret := _m.Called(args)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(map[string]interface{}) time.Duration); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}
